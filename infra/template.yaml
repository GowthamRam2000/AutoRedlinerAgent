AWSTemplateFormatVersion: '2010-09-09'
Description: Auto Redliner (India) - Backend (Lambda + API) and S3 buckets

Parameters:
  ProjectName:
    Type: String
    Default: redliner
  BedrockModelId:
    Type: String
    Default: amazon.nova-lite-v1:0
  AllowedOrigins:
    Type: String
    Default: '*'
  CodeS3Bucket:
    Type: String
    Description: S3 bucket containing the Lambda deployment zip
  CodeS3Key:
    Type: String
    Description: S3 key for the Lambda deployment zip

Resources:
  UploadsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-uploads-${AWS::AccountId}-${AWS::Region}'
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: ['PUT','GET']
            AllowedOrigins: ['*']
            ExposedHeaders: ['ETag']
            MaxAge: 3600
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  StaticSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-site-${AWS::AccountId}-${AWS::Region}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  StaticSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticSiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${StaticSiteBucket.Arn}/*'

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-role-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: app-inline
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt UploadsBucket.Arn
                  - !Sub '${UploadsBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:Converse
                  - bedrock:InvokeAgent
                Resource: '*'

  AppFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-api'
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.12
      Architectures:
        - arm64
      Handler: backend.app.handler
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeS3Key
      MemorySize: 512
      Timeout: 45
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          BEDROCK_MODEL_ID: !Ref BedrockModelId
          UPLOADS_BUCKET: !Ref UploadsBucket
          ALLOWED_ORIGINS: !Ref AllowedOrigins
          MAX_PAGES: '20'
          MAX_FILE_MB: '5'
          USE_BEDROCK_AGENT: '0'
          BEDROCK_AGENT_ID: ''
          BEDROCK_AGENT_ALIAS_ID: ''

  AppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-api'
      RetentionInDays: 7
    DeletionPolicy: Retain


  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${ProjectName}-http-api'
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - !Ref AllowedOrigins
        AllowMethods: ['GET','POST','OPTIONS']
        AllowHeaders: ['*']

  AppIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AppFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  RouteUpload:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /upload-url'
      Target: !Sub 'integrations/${AppIntegration}'

  RouteAnalyze:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /analyze'
      Target: !Sub 'integrations/${AppIntegration}'

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: prod
      AutoDeploy: true

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AppFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*/*'

Outputs:
  ApiBaseUrl:
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Description: Base URL for the HTTP API
  UploadsBucketName:
    Value: !Ref UploadsBucket
  StaticSiteURL:
    Value: !Sub 'http://${StaticSiteBucket}.s3-website-${AWS::Region}.amazonaws.com'
    Description: Public URL for the static frontend site
